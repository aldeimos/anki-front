{"version":3,"sources":["store/decks/index.js","store/decks/actions.js","store/index.js","networking/api.js","components/FlipperLogo/index.js","containers/Welcome/index.js","components/Deck/index.js","components/Favorites/index.js","components/CustomButton/index.js","containers/Home/index.js","components/AddCard/index.js","components/PhraseCard/index.js","containers/AddDeck/index.js","store/decks/actionsCreators.js","containers/index.js","store/user/index.js","index.js"],"names":["initialState","decks","newDeck","state","action","type","combineReducers","IS_DEV","window","location","href","indexOf","FlipperLogo","useState","toggle","setToggle","useEffect","intervalID","setInterval","prev","clearInterval","className","Welcome","id","router","store","useModel","user","userActions","profile","Promise","resolve","a","bridge","send","then","load","centered","first_name","size","mode","onClick","openPanel","Deck","title","isFavorite","cards","progress","width","height","fill","length","value","Favorites","useSelector","filter","deck","map","key","CustomButton","text","icon","handler","defaultProps","console","log","Home","AddCard","setShowPopup","addCard","isRepeat","setIsRepeat","nanoid","phrase_1","phrase_2","card","setCard","setStateField","field","top","onChange","e","target","checked","stretched","disabled","trim","PhraseCard","deleteCard","AddDeck","dispatch","useDispatch","setNewDeck","showPopup","left","goBack","default","vertical","addDeck","App","Router","initialPage","Page","initialPanel","registerModel","vk_settings","utils","parseParams","search","subscribe","schemeChanger","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.240a6547.chunk.js","sourcesContent":["import * as types from './actions';\n\nconst initialState = {\n    decks: [],\n    newDeck: {}\n};\n\nconst decks = (state = initialState, action) => {\n    switch (action.type) {\n        case types.LOAD_DECKS: {\n            const { decks } = action;\n            return {\n                ...state,\n                decks\n            }\n        }\n        case types.ADD_DECK: {\n            const { newDeck } = action;\n            state.decks = [...state.decks, newDeck];\n            return {\n                ...state,\n            }\n        }\n        default: return state;\n    }\n};\n\nexport default decks;\n\n\n\n","export const ADD_CARD = '@decks/add-card';\nexport const ADD_DECK = '@decks/add';\nexport const DELETE_CARD = '@decks/delete-card';\nexport const LOAD_DECKS = '@decks/load';\n\n\n","import {combineReducers} from 'redux';\n\nimport decks from '../store/decks/';\n\nexport default combineReducers({\n    decks\n});\n","import bridge from '@vkontakte/vk-bridge';\n\nconst IS_DEV = window.location.href.indexOf(\"vk_app_id\") === -1;\n\nexport const getProfile = () => new Promise (async (resolve) => {\n    if (IS_DEV) {\n        return resolve({\n            \"id\": 2314852,\n            \"first_name\": \"Ирина\",\n            \"last_name\": \"Денежкина\",\n            \"sex\": 1,\n            \"city\": {\n                \"id\": 2,\n                \"title\": \"Санкт-Петербург\"\n            },\n            \"country\": {\n                \"id\": 1,\n                \"title\": \"Россия\"\n            },\n            \"bdate\": \"10.4.1990\",\n            \"photo_100\": \"https://pp.userapi.com/c836333/v836333553/5b138/2eWBOuj5A4g.jpg\",\n            \"photo_200\": \"https://pp.userapi.com/c836333/v836333553/5b137/tEJNQNigU80.jpg\",\n            \"timezone\": 3\n        });\n    }\n\n    const profile = await bridge.send('VKWebAppGetUserInfo', {});\n    return resolve(profile);\n});\n\n","import React, { useState, useEffect } from 'react';\n\nimport './index.scss';\n\nconst FlipperLogo = () => {\n    const [toggle, setToggle] = useState(false);\n\n    useEffect(() => {\n        const intervalID = setInterval(() => {\n            setToggle((prev) => !prev);\n        }, 3500);\n        return () => {\n            clearInterval(intervalID);\n        }\n    }, []);\n\n    return (\n        <div className={`flip-container ${toggle ? 'active' : null}`}>\n            <div className=\"flipper\">\n                <div className=\"front\">\n                    Decks\n                </div>\n                <div className=\"back\">\n                    Колоды\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default FlipperLogo;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport * as API from '../../networking/api';\nimport { store } from '@mini-core/core';\nimport {Button, Panel} from '@vkontakte/vkui';\nimport FlipperLogo from '../../components/FlipperLogo';\n\nimport './index.scss';\n\nconst Welcome = ({id, router}) => {\n    const [user, userActions] = store.useModel('user');\n    const { profile } = user;\n\n    useEffect(() => {\n        API.getProfile().then(profile => userActions.load(profile));\n    }, []);\n\n    return (\n        <Panel id={id} centered>\n            <div className=\"welcome\">\n                <div className=\"welcome__cards\">\n                    <div className=\"welcome__card welcome__card--1\">\n                        Hello\n                    </div>\n                    <div className=\"welcome__card welcome__card--2\">\n                        Hallo\n                    </div>\n                    <div className=\"welcome__card welcome__card--3\">\n                        Salut\n                    </div>\n                    <div className=\"welcome__card welcome__card--4\">\n                        你好\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"welcome__logo\">\n                        <FlipperLogo/>\n                    </div>\n                    <div className=\"welcome__text\">\n                        Привет, {profile && profile.first_name}<br/>\n                        Decks — это приложение, которое позволяет эффективно расширить словарный запас изучаемого языка.\n                    </div>\n                    <Button\n                        size=\"xl\"\n                        mode=\"overlay-primary\"\n                        onClick={() => router.openPanel('home')}\n                    >\n                        Продолжить\n                    </Button>\n                </div>\n            </div>\n        </Panel>\n    )\n};\n\nWelcome.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport default Welcome;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Button, Card, Progress} from '@vkontakte/vkui';\n\nimport './index.scss';\nimport Icon28EditOutline from '@vkontakte/icons/dist/28/edit_outline';\nimport Icon28FavoriteOutline from '@vkontakte/icons/dist/28/favorite_outline';\nimport Icon28Favorite from '@vkontakte/icons/dist/28/favorite';\n\nconst Deck = ({title, isFavorite, cards, progress}) => {\n    return (\n            <Card\n                mode=\"outline\"\n            >\n                <div className=\"deck\">\n                    <div className=\"deck__header\">\n                        <div className=\"deck__title\">\n                            {title}\n                        </div>\n                        <div className=\"deck__controls\">\n                            <Icon28EditOutline\n                                width={20}\n                                height={20}\n                                fill=\"royalblue\"\n                            />\n                            {isFavorite ?\n                                <Icon28Favorite\n                                    width={20}\n                                    height={20}\n                                    fill=\"royalblue\"\n                                /> :\n                                <Icon28FavoriteOutline\n                                    width={20}\n                                    height={20}\n                                    fill=\"royalblue\"\n                                />\n                            }\n                        </div>\n                    </div>\n                    <div className=\"deck__words\">\n                        {cards.length} карточек\n                    </div>\n                    <div className=\"deck__progress\">\n                        <Progress value={50}/>\n                        <div className=\"deck__progress-count\">\n                            {progress}%\n                        </div>\n                    </div>\n                    <Button\n                        size=\"l\"\n                    >\n                        Учить\n                    </Button>\n                </div>\n            </Card>\n    )\n};\n\nDeck.propTypes = {\n    title: PropTypes.string.isRequired,\n    words: PropTypes.array.isRequired,\n    isFavorite: PropTypes.bool.isRequired,\n    progress: PropTypes.number.isRequired,\n};\n\nexport default Deck;\n","import React from 'react';\nimport {CardScroll} from '@vkontakte/vkui';\nimport Deck from '../Deck';\n\nimport './index.scss'\nimport {useSelector} from \"react-redux\";\n\nconst Favorites = () => {\n    const decks = useSelector(store => store.decks.decks);\n\n    return (\n        <div className=\"favorites\">\n            <CardScroll>\n                {decks.length !== 0 ?\n                    decks.filter(deck => deck.isFavorite)\n                        .map(deck => <Deck key={deck.id} {...deck}/>) :\n                    null\n                }\n            </CardScroll>\n        </div>\n    )\n};\n\nexport default Favorites;\n","import React from 'react';\n\nimport './index.scss';\n\nconst CustomButton = ({text, icon, handler}) => {\n    return (\n        <div\n            className=\"custom-button\"\n            onClick={handler}\n        >\n            {icon}\n            {text}\n        </div>\n    )\n};\n\nCustomButton.defaultProps = {\n    handler: () => console.log('click')\n};\n\nexport default CustomButton;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {Group, Panel, PanelHeader} from '@vkontakte/vkui';\n\nimport Favorites from '../../components/Favorites';\nimport Deck from '../../components/Deck'\nimport CustomButton from '../../components/CustomButton';\n\nimport './index.scss';\nimport Icon28AddSquareOutline from '@vkontakte/icons/dist/28/add_square_outline';\n\n\nconst Home = ({id, router}) => {\n    const decks = useSelector(store => store.decks.decks);\n    console.log(decks);\n    return (\n        <Panel id={id}>\n            <PanelHeader>\n                Список колод\n            </PanelHeader>\n            <Group>\n                {decks.filter(deck => deck.isFavorite).length !== 0 &&\n                    <div className=\"home__title\">\n                        Избранное\n                    </div>\n                }\n                <Favorites/>\n            </Group>\n            <div className=\"container\">\n                <div className=\"home__decks\">\n                    <CustomButton\n                        text=\"Добавить колоду\"\n                        icon={<Icon28AddSquareOutline fill=\"royalblue\"/>}\n                        handler={() => router.openPanel('add-deck')}\n                    />\n                    <div className=\"home__my-decks\">\n                        <div className=\"home__title home__title--sub\">\n                            Мои колоды\n                        </div>\n                        <Group>\n                            {decks.length !== 0 ?\n                                decks.filter(deck => deck.isFavorite === false)\n                                    .map(deck => <Deck key={deck.id} {...deck}/>) :\n                                'Список колод пуст'\n                            }\n                        </Group>\n                    </div>\n                </div>\n            </div>\n        </Panel>\n    )\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {Button, Checkbox, FormLayout, FormLayoutGroup, Input} from '@vkontakte/vkui';\n\nimport './index.scss';\n\nconst AddCard = ({setShowPopup, addCard}) => {\n    const [isRepeat, setIsRepeat] = useState(false);\n\n    const [card, setCard] = useState({\n        id: nanoid(),\n        phrase_1: '',\n        phrase_2: ''\n    });\n\n    const setStateField = (value, field) => {\n\n        setCard((prev) => ({\n            ...prev,\n            [field]: value\n        }));\n    };\n\n    const clearState = () => {\n        setCard({id: nanoid(), phrase_1: '', phrase_2: ''})\n    };\n\n    const onAddButtonClickHandler = () => {\n        addCard((prev) => ({\n            ...prev,\n            cards: [...prev.cards, card]\n        }));\n\n        console.log(card);\n        setShowPopup(isRepeat);\n        clearState();\n    };\n\n    const validateAddCard = () => {\n        return card.phrase_1.trim().length === 0 || card.phrase_2.trim().length === 0\n    };\n\n    return (\n        <div className=\"add-card\">\n            <div\n                className=\"add-card__mask\"\n                onClick={() => setShowPopup(false)}\n            >\n            </div>\n            <div className=\"add-card__content\">\n                <div className=\"add-card__title\">\n                    Создание карточки\n                </div>\n                <FormLayout>\n                    <FormLayoutGroup top=\"Введите слово на основном языке\">\n                        <Input\n                            type=\"text\"\n                            value={card.phrase_1}\n                            onChange={(e) => setStateField(e.target.value, 'phrase_1')}\n                        />\n                    </FormLayoutGroup>\n                    <FormLayoutGroup top=\"Введите слово на изучаемом языке\">\n                        <Input\n                            type=\"text\"\n                            value={card.phrase_2}\n                            onChange={(e) => setStateField(e.target.value, 'phrase_2')}\n                        />\n                        <Checkbox\n                            value={isRepeat}\n                            onChange={(e) => setIsRepeat(e.target.checked)}\n                        >\n                            Создать ещё одну карточку\n                        </Checkbox>\n                    </FormLayoutGroup>\n\n                    <div className=\"add-card__controls\">\n                        <Button\n                            stretched\n                            size=\"xl\"\n                            onClick={onAddButtonClickHandler}\n                            disabled={validateAddCard()}\n                        >\n                            Добавить\n                        </Button>\n                        <div\n                            className=\"add-card__cancel\"\n                            onClick={() => setShowPopup(false)}\n                        >\n                            Отменить\n                        </div>\n                    </div>\n                </FormLayout>\n            </div>\n        </div>\n    )\n};\n\nexport default AddCard;\n","import React from 'react';\n\nimport './index.scss';\nimport Icon28DeleteOutline from '@vkontakte/icons/dist/28/delete_outline';\n\nconst PhraseCard = ({id, phrase_1, phrase_2, deleteCard}) => {\n\n    const onDeleteClickHandler = () => {\n        deleteCard((prev) => ({\n            ...prev,\n            cards: prev.cards.filter(card => card.id !== id)\n        }))\n    };\n\n    return (\n        <div className=\"phrase-card\">\n            <div\n                className=\"phrase-card__wrapper\"\n            >\n                {phrase_1} / {phrase_2}\n            </div>\n            <Icon28DeleteOutline\n                onClick={onDeleteClickHandler}\n                fill=\"royalblue\"\n            />\n        </div>\n    )\n};\n\nexport default PhraseCard;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addDeck } from '../../store/decks/actionsCreators';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport {\n    Panel,\n    PanelHeader,\n    PanelHeaderBack,\n    FormLayout,\n    FormLayoutGroup,\n    Input,\n    Checkbox, FixedLayout, Button,\n    Div\n} from '@vkontakte/vkui';\nimport AddCard from '../../components/AddCard';\nimport CustomButton from '../../components/CustomButton';\nimport PhraseCard from '../../components/PhraseCard';\n\nimport './index.scss';\nimport Icon28AddSquareOutline from '@vkontakte/icons/dist/28/add_square_outline';\n\n\n\nconst AddDeck = ({id, router}) => {\n    const dispatch = useDispatch();\n    const [newDeck, setNewDeck] = useState(\n        {\n            id: nanoid(),\n            title: '',\n            isFavorite: false,\n            cards: [],\n            progress: 0\n        }\n    );\n    const [showPopup, setShowPopup] = useState(false);\n\n    const setStateField = (value, field) => {\n        setNewDeck(prev => ({\n            ...prev,\n            [field]: value\n        }));\n    };\n\n    const onAddDeckClickHandler = () => {\n        dispatch(addDeck(newDeck));\n        router.openPanel('home');\n    };\n\n    const validateAddButton = () => {\n        return newDeck.title.trim().length === 0 || newDeck.cards.length === 0;\n    };\n\n\n\n    return (\n        <Panel id={id}>\n            <PanelHeader\n                left={\n                    <PanelHeaderBack\n                        onClick={() => router.goBack()}\n                    />\n                }\n            >\n                Создание колоды\n            </PanelHeader>\n            <FormLayout>\n                <FormLayoutGroup top=\"Название колоды\">\n                    <Input\n                        type=\"text\"\n                        default=\"Работа\"\n                        value={newDeck.title}\n                        onChange={(e) => setStateField(e.target.value, 'title')}\n                    />\n                    <Checkbox\n                        value={newDeck.isFavorite}\n                        onChange={(e) => setStateField(e.target.checked, 'isFavorite')}\n                    >\n                        Добавить колоду в Избранные\n                    </Checkbox>\n                    <CustomButton\n                        text=\"Добавить карточку\"\n                        icon={<Icon28AddSquareOutline fill=\"royalblue\"/>}\n                        handler={() => setShowPopup(true)}\n                    />\n                </FormLayoutGroup>\n            </FormLayout>\n            <Div>\n                <div className=\"add-deck__title\">\n                    Карточки в колоде\n                </div>\n                {newDeck.cards.length !== 0 ?\n                    newDeck.cards.map((card) =>\n                        <PhraseCard\n                            key={card.id}\n                            deleteCard={setNewDeck}\n                            {...card}\n                    />) :\n                    'Ваша колода пуста'\n                }\n            </Div>\n            <FixedLayout vertical=\"bottom\">\n                <div className=\"add-deck__btn\">\n                    <Button\n                        stretched\n                        size=\"xl\"\n                        onClick={onAddDeckClickHandler}\n                        disabled={validateAddButton()}\n                    >\n                        Создать колоду\n                    </Button>\n                </div>\n            </FixedLayout>\n            {showPopup && <AddCard\n                setShowPopup={setShowPopup}\n                addCard={setNewDeck}\n            />\n            }\n        </Panel>\n    )\n};\n\nAddDeck.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport default AddDeck;\n","import * as types from './actions';\n\nexport const loadDecks = (decks) => {\n    return {\n        type: types.LOAD_DECKS,\n        decks,\n    }\n};\n\nexport const addDeck = (newDeck) => {\n    return {\n        type: types.ADD_DECK,\n        newDeck\n    }\n};\n\nexport const addCard = (card) => {\n    return {\n        type: types.ADD_CARD,\n        card\n    }\n};\n\nexport const deleteCard = (card) => {\n    return {\n        type: types.DELETE_CARD,\n        card\n    }\n};\n","import React from 'react';\nimport { router } from '@mini-core/core';\nimport Welcome from './Welcome';\nimport Home from './Home';\nimport AddDeck from './AddDeck';\n\nimport './index.scss';\n\nconst App = () => {\n    return (\n        <router.Router initialPage=\"main\">\n            <router.Page id=\"main\" initialPanel=\"home\">\n                <Welcome id=\"welcome\" />\n                <Home id=\"home\" />\n                <AddDeck id=\"add-deck\"/>\n            </router.Page>\n        </router.Router>\n    );\n};\n\nexport default App;\n","import { store } from '@mini-core/core';\n\nconst initialState = {\n    profile: null\n};\n\nconst actions = {\n    load: (profile) => {\n        return {\n            profile\n        }\n    }\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'load':\n            const { profile } = action;\n            return {\n                ...state,\n                profile\n            };\n        default: return state;\n    }\n};\n\nstore.registerModel('user', null, initialState, actions, reducer);\n","import 'core-js/features/map';\nimport 'core-js/features/set';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore} from 'redux';\nimport rootReducer from './store/';\nimport bridge from '@vkontakte/vk-bridge';\nimport { utils } from '@mini-core/core';\n\nimport App from './containers';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport './store/decks';\nimport './store/user';\n\nwindow.vk_settings = utils.parseParams(window.location.search);\nbridge.subscribe(utils.schemeChanger);\n\nconst store = createStore(rootReducer);\n\nbridge.send('VKWebAppInit');\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n"],"sourceRoot":""}